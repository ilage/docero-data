package org.docero.data.processor;

import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.TypeMirror;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.stream.Collectors;

class DDataBuilder {
    final ProcessingEnvironment environment;
    final HashMap<String, DataBeanBuilder> beansByInterface = new HashMap<>();
    final ArrayList<DataRepositoryBuilder> repositories = new ArrayList<>();
    final ArrayList<BatchRepositoryBuilder> batchRepositories = new ArrayList<>();
    final HashMap<String, DataRepositoryBuilder> repositoriesByBean = new HashMap<>();
    final HashSet<String> packages = new HashSet<>();
    final boolean spring;
    final HashMap<String, Mapping> mappings = new HashMap<>();

    DDataBuilder(ProcessingEnvironment environment) {
        this.environment = environment;
        TypeElement sqlSDS = environment.getElementUtils()
                .getTypeElement("org.mybatis.spring.support.SqlSessionDaoSupport");
        TypeElement dS = environment.getElementUtils()
                .getTypeElement("org.springframework.dao.support.DaoSupport");
        spring = dS != null && sqlSDS != null && sqlSDS.getKind() == ElementKind.CLASS;
    }

    void checkInterface(Element beanElement, TypeMirror collectionType, TypeMirror mapType, TypeMirror versionedBeanType) {
        String typeName = beanElement.asType().toString();
        packages.add(typeName.substring(0, typeName.lastIndexOf('.')));
        DataBeanBuilder value = new DataBeanBuilder(beanElement, this, collectionType, mapType, versionedBeanType);
        beansByInterface.put(value.interfaceType.toString(), value);
    }

    void checkRepository(TypeElement repositoryElement, TypeMirror versionalType) {
        String typeName = repositoryElement.asType().toString();
        packages.add(typeName.substring(0, typeName.lastIndexOf('.')));
        if (repositoryElement.getInterfaces().stream()
                .anyMatch(i -> i.toString().contains("org.docero.data.DDataBatchOpsRepository"))) {
            BatchRepositoryBuilder builder =
                    new BatchRepositoryBuilder(this, repositoryElement);
            batchRepositories.add(builder);
        } else {
            DataRepositoryBuilder builder =
                    new DataRepositoryBuilder(this, repositoryElement);
            repositoriesByBean.put(builder.forInterfaceName(), builder);
            repositories.add(builder);
        }
    }

    void generateAnnotationsAndEnums() throws IOException {
        for (DataBeanBuilder bean : beansByInterface.values()) {
            bean.buildAnnotationsAndEnums(environment, beansByInterface);
        }
    }

    void generateImplementation() throws IOException {
        for (DataBeanBuilder bean : beansByInterface.values()) {
            bean.buildImplementation(environment);
        }
        for (DataRepositoryBuilder repositoryBuilder : repositories) {
            repositoryBuilder.build(environment, spring);
        }
    }

    void generateDdata() throws IOException {
        for (DataBeanBuilder bean : beansByInterface.values()) {
            if (!repositoriesByBean.containsKey(bean.interfaceType.toString())) {
                DataRepositoryBuilder r = DataRepositoryBuilder.build(this, bean);
                repositoriesByBean.put(bean.interfaceType.toString(), r);
                repositories.add(r);
            }
        }

        for (BatchRepositoryBuilder batchRepository : batchRepositories) {
            batchRepository.generate();
        }

        try (JavaClassWriter cf = new JavaClassWriter(environment, "org.docero.data.DData")) {
            cf.println("package org.docero.data;");
            cf.startBlock("/*");
            cf.println("Class generated by docero-data processor.");
            cf.endBlock("*/");
            cf.startBlock("public class DData {");

            cf.startBlock("public static <T extends java.io.Serializable,C extends java.io.Serializable> " +
                    "DDataRepository<T,C> getRepository(Class<T> repositoryClass) {");
            for (String repositoryFor : repositoriesByBean.keySet()) {
                DataRepositoryBuilder repository = repositoriesByBean.get(repositoryFor);
                cf.println("if (repositoryClass == " +
                        repositoryFor + ".class) return (DDataRepository<T, C>) new " +
                        repository.daoClassName + "();");
            }
            cf.println("return null;");
            cf.endBlock("}");

            /*cf.println("");
            cf.startBlock("public static final Class<?>[] implementations = " +
                    "new Class<?>[] {");
            cf.println(
                    repositoriesByBean.values().stream()
                            .map(r -> r.beanImplementation + ".class")
                            .collect(Collectors.joining(",\n\t\t"))
            );
            cf.endBlock("};");*/

            cf.println("");
            cf.startBlock("public static final java.util.Map<Class<?>,Class<?>> implementations = " +
                    "new java.util.HashMap<Class<?>,Class<?>>() {{");
            for (String interfaceName : beansByInterface.keySet()) {
                cf.println("this.put(" +
                        interfaceName + ".class," +
                        beansByInterface.get(interfaceName).getImplementationName() + ".class);");
            }
            cf.endBlock("}};");

            if (environment.getElementUtils().getTypeElement("com.fasterxml.jackson.databind.JsonDeserializer") != null) {
                cf.println("");
                cf.startBlock("/**");
                cf.println("simple usage: DData.deserializers.forEach(builder::deserializerByType);");
                cf.println("<p>where builder is org.springframework.http.converter.json.Jackson2ObjectMapperBuilder</p>");
                cf.endBlock("*/");
                cf.startBlock("public static final java.util.Map<Class<?>,com.fasterxml.jackson.databind.JsonDeserializer<?>> deserializers = " +
                        "new java.util.HashMap<Class<?>,com.fasterxml.jackson.databind.JsonDeserializer<?>>() {{");

                for (String interfaceName : beansByInterface.keySet()) {
                    cf.startBlock("this.put(" +
                            interfaceName + ".class, new com.fasterxml.jackson.databind.JsonDeserializer<" +
                            interfaceName + ">() {");
                    cf.println("@Override");
                    cf.startBlock("public " + interfaceName + " deserialize(com.fasterxml.jackson.core.JsonParser p, " +
                            "com.fasterxml.jackson.databind.DeserializationContext ctxt) throws " +
                            "java.io.IOException, com.fasterxml.jackson.core.JsonProcessingException {");
                    cf.println("return ctxt.readValue(p, " +
                            beansByInterface.get(interfaceName).getImplementationName() +
                            ".class);");
                    cf.endBlock("}");
                    cf.endBlock("});");
                }

                cf.endBlock("}};");
            }

            cf.endBlock("}");
        }

        if (spring)
            try (JavaClassWriter cf = new JavaClassWriter(environment, "org.docero.data.DDataResources")) {
                cf.println("package org.docero.data;");
                cf.startBlock("/*");
                cf.println("Class generated by docero-data processor.");
                cf.endBlock("*/");
                cf.startBlock("public class DDataResources {");
                cf.println("private java.util.List<org.springframework.core.io.Resource> list = new java.util.ArrayList<>();");
                cf.println("DDataResources() {}");

                cf.startBlock("public org.springframework.core.io.Resource[] asArray() {;");
                cf.println("return list.toArray(new org.springframework.core.io.Resource[list.size()]);");
                cf.endBlock("}");

                cf.startBlock("void add(org.springframework.core.io.Resource res) {");
                cf.println("list.add(res);");
                cf.endBlock("}");

                cf.endBlock("}");
            }
    }
}
