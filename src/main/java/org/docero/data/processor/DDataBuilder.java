package org.docero.data.processor;

import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.TypeMirror;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

class DDataBuilder {
    private final ProcessingEnvironment environment;

    final HashMap<String, DataBeanBuilder> beansByInterface = new HashMap<>();
    final ArrayList<DataRepositoryBuilder> repositories = new ArrayList<>();
    final HashMap<String, DataRepositoryBuilder> repositoriesByBean = new HashMap<>();
    final HashSet<String> packages = new HashSet<>();

    DDataBuilder(ProcessingEnvironment environment) {
        this.environment = environment;
    }

    void checkInterface(Element beanElement, TypeMirror collectionType, TypeMirror mapType) {
        String typeName = beanElement.asType().toString();
        packages.add(typeName.substring(0, typeName.lastIndexOf('.')));
        DataBeanBuilder value = new DataBeanBuilder(beanElement, environment, collectionType, mapType);
        beansByInterface.put(value.interfaceType.toString(), value);
    }

    void checkRepository(Element repositoryElement) {
        String typeName = repositoryElement.asType().toString();
        packages.add(typeName.substring(0, typeName.lastIndexOf('.')));
        DataRepositoryBuilder builder =
                new DataRepositoryBuilder(
                        (TypeElement) repositoryElement,
                        environment, beansByInterface);
        repositoriesByBean.put(builder.forInterfaceName(), builder);
        repositories.add(builder);
    }

    void generateClasses() throws IOException {
        for (DataBeanBuilder bean : beansByInterface.values()) {
            bean.build(environment, beansByInterface);
        }
        for (DataRepositoryBuilder repositoryBuilder : repositories) {
            repositoryBuilder.build(environment);
        }
        for (DataBeanBuilder bean : beansByInterface.values()) {
            if (!repositoriesByBean.containsKey(bean.interfaceType.toString())) {
                DataRepositoryBuilder r = DataRepositoryBuilder.build(bean, environment, beansByInterface);
                repositoriesByBean.put(bean.interfaceType.toString(), r);
                repositories.add(r);
            }
        }
        try (JavaClassWriter cf = new JavaClassWriter(environment, "org.docero.data.DData")) {
            cf.println("package org.docero.data;");
            cf.startBlock("/*");
            cf.println("Class generated by docero-data processor.");
            cf.endBlock("*/");
            cf.startBlock("public class DData {");

            cf.startBlock("public static <T extends java.io.Serializable,C extends java.io.Serializable> " +
                    "DDataRepository<T,C> getRepository(Class<T> repositoryClass) {");
            for (String repositoryFor : repositoriesByBean.keySet()) {
                DataRepositoryBuilder repository = repositoriesByBean.get(repositoryFor);
                cf.println("if (repositoryClass == " +
                        repositoryFor + ".class) return (DDataRepository<T, C>) new " +
                        repository.daoClassName + "();");
            }
            cf.println("return null;");
            cf.endBlock("}");

            cf.endBlock("}");
        }
    }
}
