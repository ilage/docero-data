package org.docero.data.processor;

import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.TypeMirror;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

class DDataBuilder {
    private final ProcessingEnvironment environment;

    final HashMap<String, DataBeanBuilder> beansByInterface = new HashMap<>();
    final ArrayList<DataRepositoryBuilder> repositories = new ArrayList<>();
    final HashMap<String, DataRepositoryBuilder> repositoriesByBean = new HashMap<>();
    final HashSet<String> packages = new HashSet<>();
    private final boolean spring;

    DDataBuilder(ProcessingEnvironment environment) {
        this.environment = environment;
        TypeElement sqlSDS = environment.getElementUtils()
                .getTypeElement("org.mybatis.spring.support.SqlSessionDaoSupport");
        TypeElement dS = environment.getElementUtils()
                .getTypeElement("org.springframework.dao.support.DaoSupport");
        spring = dS != null && sqlSDS != null && sqlSDS.getKind() == ElementKind.CLASS;
    }

    void checkInterface(Element beanElement, TypeMirror collectionType, TypeMirror mapType) {
        String typeName = beanElement.asType().toString();
        packages.add(typeName.substring(0, typeName.lastIndexOf('.')));
        DataBeanBuilder value = new DataBeanBuilder(beanElement, environment, collectionType, mapType);
        beansByInterface.put(value.interfaceType.toString(), value);
    }

    void checkRepository(Element repositoryElement) {
        String typeName = repositoryElement.asType().toString();
        packages.add(typeName.substring(0, typeName.lastIndexOf('.')));
        DataRepositoryBuilder builder =
                new DataRepositoryBuilder(
                        (TypeElement) repositoryElement,
                        environment, beansByInterface);
        repositoriesByBean.put(builder.forInterfaceName(), builder);
        repositories.add(builder);
    }

    void generateClasses() throws IOException {
        for (DataBeanBuilder bean : beansByInterface.values()) {
            bean.build(environment, beansByInterface);
        }
        for (DataRepositoryBuilder repositoryBuilder : repositories) {
            repositoryBuilder.build(environment, spring);
        }
        for (DataBeanBuilder bean : beansByInterface.values()) {
            if (!repositoriesByBean.containsKey(bean.interfaceType.toString())) {
                DataRepositoryBuilder r = DataRepositoryBuilder.build(bean, environment, beansByInterface, spring);
                repositoriesByBean.put(bean.interfaceType.toString(), r);
                repositories.add(r);
            }
        }

        if (spring)
            try (JavaClassWriter cf = new JavaClassWriter(environment, "org.docero.data.DDataConfiguration")) {
                cf.println("package org.docero.data;");
                cf.startBlock("/*");
                cf.println("Class generated by docero-data processor.");
                cf.endBlock("*/");
                cf.println("@org.springframework.context.annotation.Configuration");
                cf.startBlock("public class DDataConfiguration {");
                for (DataRepositoryBuilder repository : repositories) {
                    int offset = repository.daoClassName.lastIndexOf('.') + 1;
                    String methodName = Character.toLowerCase(repository.daoClassName.charAt(offset)) +
                            repository.daoClassName.substring(offset + 1);
                    cf.println("@org.springframework.context.annotation.Bean");
                    cf.startBlock("public " + repository.repositoryInterface + " " + methodName +
                            "(org.apache.ibatis.session.SqlSessionFactory sqlSessionFactory) {");
                    DeclaredType getType = environment.getTypeUtils().getDeclaredType(
                            environment.getElementUtils().getTypeElement("org.docero.data.DDataRepository"),
                            repository.forInterfaceName, repository.idClass);
                    ;
                    cf.println(getType + " r = DData.getRepository(" + repository.forInterfaceName + ".class);");
                    cf.println("if (r != null)\n                " +
                            "((org.mybatis.spring.support.SqlSessionDaoSupport) r).setSqlSessionFactory(sqlSessionFactory);");
                    cf.println("return (" + repository.repositoryInterface + ") r;");
                    cf.endBlock("}");
                }
                cf.println("");
                cf.println("@org.springframework.context.annotation.Bean");
                cf.startBlock("public org.springframework.core.io.Resource[] dDataResources(org.springframework.context.ApplicationContext context) {");
                cf.println("java.util.List<org.springframework.core.io.Resource> r = new java.util.ArrayList<>();");
                for (DataRepositoryBuilder repository : repositories)
                    cf.println("r.add(context.getResource(\"classpath:" +
                            repository.mappingClassName.replaceAll("\\.","/") +
                            ".xml\"));");
                //TODO additional resources
                cf.println("r.add(context.getResource(\"classpath:org/docero/data/example/MyMapping.xml\"));");
                cf.println("return r.toArray(new org.springframework.core.io.Resource[r.size()]);");
                cf.endBlock("}");
                cf.endBlock("}");
            }

        try (JavaClassWriter cf = new JavaClassWriter(environment, "org.docero.data.DData")) {
            cf.println("package org.docero.data;");
            cf.startBlock("/*");
            cf.println("Class generated by docero-data processor.");
            cf.endBlock("*/");
            cf.startBlock("public class DData {");

            cf.startBlock("public static <T extends java.io.Serializable,C extends java.io.Serializable> " +
                    "DDataRepository<T,C> getRepository(Class<T> repositoryClass) {");
            for (String repositoryFor : repositoriesByBean.keySet()) {
                DataRepositoryBuilder repository = repositoriesByBean.get(repositoryFor);
                cf.println("if (repositoryClass == " +
                        repositoryFor + ".class) return (DDataRepository<T, C>) new " +
                        repository.daoClassName + "();");
            }
            cf.println("return null;");
            cf.endBlock("}");

            cf.endBlock("}");
        }
    }
}
