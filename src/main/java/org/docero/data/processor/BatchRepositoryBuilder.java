package org.docero.data.processor;

import javax.lang.model.element.*;
import javax.lang.model.type.TypeMirror;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

@SuppressWarnings("WeakerAccess")
class BatchRepositoryBuilder {
    final List<TypeMirror> beans;
    final TypeMirror repositoryInterface;
    final DDataBuilder dataBuilder;
    final String implClassName;
    final List<MethodBehindFacade> methods = new ArrayList<>();

    BatchRepositoryBuilder(DDataBuilder dDataBuilder, TypeElement repositoryElement) {
        dataBuilder = dDataBuilder;
        repositoryInterface = repositoryElement.asType();
        implClassName = repositoryInterface + "_Impl_";
        beans = dDataBuilder.readBeansFromBeanElement(repositoryElement);

        for (Element element : repositoryElement.getEnclosedElements())
            if (element.getKind() == ElementKind.METHOD && !(
                    element.getModifiers().contains(Modifier.DEFAULT) ||
                            element.getModifiers().contains(Modifier.STATIC)
            )) methods.add(new MethodBehindFacade((ExecutableElement) element));
    }

    private class BeanData {
        final DataBeanBuilder bean;
        final DataRepositoryBuilder repository;

        private BeanData(DataBeanBuilder bean, DataRepositoryBuilder repository) {
            this.bean = bean;
            this.repository = repository;
        }
    }

    void generate() throws IOException {
        int simpNameDel = implClassName.lastIndexOf('.');

        HashMap<TypeMirror, BeanData> supported = new HashMap<>();
        for (TypeMirror bean : beans) {
            DataBeanBuilder beanBuilder = dataBuilder.beansByInterface.get(bean.toString());
            DataRepositoryBuilder beanRepository = dataBuilder.repositoriesByBean.get(bean.toString());
            supported.put(bean, new BeanData(beanBuilder, beanRepository));
        }

        try (JavaClassWriter cf = new JavaClassWriter(dataBuilder.environment, implClassName)) {
            String implPackage = implClassName.substring(0, simpNameDel);
            cf.println("package " + implPackage + ";");

            for (BeanData d : supported.values()) {
                String beanPkg = d.bean.interfaceType.toString();
                beanPkg = beanPkg.substring(0, beanPkg.lastIndexOf('.'));
                if (!implPackage.equals(beanPkg))
                    cf.println("import " + beanPkg + ".*;");
            }
            cf.println("import org.apache.ibatis.session.SqlSessionFactory;");
            cf.println("import org.apache.ibatis.session.ExecutorType;");
            if (dataBuilder.spring) cf.println("import org.mybatis.spring.SqlSessionTemplate;");
            cf.startBlock("/*");
            cf.println("Class generated by docero-data processor.");
            cf.endBlock("*/");
            cf.startBlock("public final class " +
                    implClassName.substring(simpNameDel + 1)
                    + (dataBuilder.spring ? " extends org.mybatis.spring.support.SqlSessionDaoSupport" : "") +
                    " implements " + repositoryInterface + " {");
            if (dataBuilder.spring) {
                for (BeanData d : supported.values()) {
                    cf.println("private final org.docero.data.DDataRepository<" +
                            d.bean.interfaceType + "," +
                            d.bean.keyType + "> " + d.repository.repositoryVariableName + ";");
                }
                cf.println("");
                cf.startBlock("public " + implClassName.substring(simpNameDel + 1) + "() {");
                //cf.println("this.setSqlSessionFactory(sqlSessionFactory);");
                for (BeanData d : supported.values()) {
                    cf.println("this." + d.repository.repositoryVariableName + " = new " + d.repository.daoClassName + "();");
                }
                cf.endBlock("}");

                cf.println("");
                cf.startBlock("@Override public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) {");
                cf.println("super.setSqlSessionTemplate(new SqlSessionTemplate(sqlSessionFactory, ExecutorType.BATCH));");
                for (BeanData d : supported.values()) {
                    cf.println("((org.mybatis.spring.support.SqlSessionDaoSupport)" + d.repository.repositoryVariableName +
                            ").setSqlSessionTemplate((SqlSessionTemplate)this.getSqlSession());");
                }
                cf.endBlock("}");
                cf.println("");
                cf.startBlock("@Override public void setSqlSessionTemplate(SqlSessionTemplate sqlSessionTemplate) {");
                //cf.startBlock("if (sqlSessionTemplate.getExecutorType()==ExecutorType.BATCH) {");
                cf.println("super.setSqlSessionTemplate(sqlSessionTemplate);");
                for (BeanData d : supported.values()) {
                    cf.println("((org.mybatis.spring.support.SqlSessionDaoSupport)" + d.repository.repositoryVariableName +
                            ").setSqlSessionTemplate(sqlSessionTemplate);");
                }
                //cf.endBlock("}");
                //cf.println("else throw new IllegalArgumentException(\"invalid sqlSessionTemplate for BATCH operations\");");
                cf.endBlock("}");
            }
            cf.println("");
            cf.startBlock("@Override public <T extends java.io.Serializable> T create(Class<T> clazz) {");
            cf.println("if(clazz == null) return null;");
            for (BeanData d : supported.values()) {
                cf.println("if (clazz == " + d.bean.interfaceType + ".class) " +
                        "return (T) new " + d.bean.getImplementationName() + "();");
            }
            cf.println("throw new IllegalArgumentException(\"unknown class for repository: \"+clazz.getCanonicalName());");
            cf.endBlock("}");

            cf.println("");
            cf.startBlock("@Override public <T extends java.io.Serializable> T get(Class<T> clazz, java.io.Serializable id) {");
            cf.println("if(clazz == null || id == null) return null;");
            for (BeanData d : supported.values()) {
                cf.println("if (clazz == " + d.bean.interfaceType + ".class) " +
                        "return (T) " + d.repository.repositoryVariableName + ".get((" + d.bean.keyType + ")id);");
            }
            cf.println("throw new IllegalArgumentException(\"unknown class for repository: \"+clazz.getCanonicalName());");
            cf.endBlock("}");

            cf.println("");
            cf.startBlock("@Override public java.util.List<org.apache.ibatis.executor.BatchResult> flushStatements() {");
            cf.println("return ((org.mybatis.spring.SqlSessionTemplate)getSqlSession())" +
                    ".getExecutorType()==ExecutorType.BATCH ? " +
                    "super.getSqlSession().flushStatements() : " +
                    "java.util.Collections.emptyList();");
            cf.endBlock("}");

            cf.println("");
            cf.startBlock("@Override public void insert(java.io.Serializable bean) {");
            cf.println("if(bean == null) return;");
            for (BeanData d : supported.values()) {
                cf.println("else if (bean instanceof " + d.bean.interfaceType + ") " +
                        "" + d.repository.repositoryVariableName + ".insert((" + d.bean.interfaceType + ")bean);");
            }
            cf.println("else throw new IllegalArgumentException(\"unknown class for repository: \"+bean.getClass().getCanonicalName());");
            cf.endBlock("}");

            cf.println("");
            cf.startBlock("@Override public void update(java.io.Serializable bean) {");
            cf.println("if(bean == null) return;");
            for (BeanData d : supported.values()) {
                cf.println("else if (bean instanceof " + d.bean.interfaceType + ") " +
                        "" + d.repository.repositoryVariableName + ".update((" + d.bean.interfaceType + ")bean);");
            }
            cf.println("else throw new IllegalArgumentException(\"unknown class for repository: \"+bean.getClass().getCanonicalName());");
            cf.endBlock("}");

            methods.forEach(m -> m.write(cf));

            cf.endBlock("}");
        }
    }

    private class ParamPair {
        final String name;
        final TypeMirror type;

        private ParamPair(String name, TypeMirror type) {
            this.name = name;
            this.type = type;
        }
    }

    private class MethodBehindFacade {
        final String name;
        final TypeMirror type;
        final List<? extends TypeMirror> thrown;
        private final List<ParamPair> parameters;

        MethodBehindFacade(ExecutableElement method) {
            name = method.getSimpleName().toString();
            type = method.getReturnType();
            parameters = method.getParameters().stream()
                    .map(pe -> new ParamPair(pe.getSimpleName().toString(), pe.asType()))
                    .collect(Collectors.toList());
            thrown = method.getThrownTypes();
        }

        public void write(JavaClassWriter cf) {
            try {
                //DataBeanBuilder beanBuilder = dataBuilder.beansByInterface.get(type.toString());
                DataRepositoryBuilder beanRepository = dataBuilder.repositoriesByBean.get(type.toString());

                cf.println("");
                cf.startBlock("@Override public " + type + " " + name + "(" +
                        parameters.stream()
                                .map(pp -> pp.type + " " + pp.name)
                                .collect(Collectors.joining(",")) + ") {");
                cf.println("return ((" + beanRepository.repositoryInterface +
                        ") " + beanRepository.repositoryVariableName + ")." + name + "(" +
                        parameters.stream()
                                .map(pp -> pp.name)
                                .collect(Collectors.joining(",")) + ");");
                cf.endBlock("}");
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }
}
